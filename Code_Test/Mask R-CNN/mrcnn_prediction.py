# -*- coding: utf-8 -*-
"""mrcnn_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mXivuQ-X9SVzl69F2gmPJ5oVmUEP8l_-
"""

# Commented out IPython magic to ensure Python compatibility.
import sys
import os
# %tensorflow_version 1.x
!pip install --upgrade h5py==2.10.0
os.system('%tensorflow_version 1.x')
os.system('pip install --upgrade h5py==2.10.0')
sys.path.append("/content/drive/MyDrive/Soumaya - PFE/results/saved_models/segmentation/maskrcnn/demo/")
from train_mask_rcnn_demo import *
# %matplotlib inline
test_model, inference_config = load_inference_model(1, "/content/drive/MyDrive/Soumaya - PFE/results/saved_models/segmentation/maskrcnn/mask_rcnn_object_0005.h5")
from mrcnn.visualize import random_colors, get_mask_contours, draw_mask
from google.colab.patches import cv2_imshow

import matplotlib.pyplot as plt
def mrcnn_prediction(imagePath):
  img1 = cv2.imread(imagePath)
  img=cv2.imread(imagePath)
  image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  r = test_model.detect([image])[0]
  if len(r['rois'])==0:
    plt.figure(figsize=(12,12))
    plt.subplot(1,2,1)
    plt.imshow(np.squeeze(img1))
    plt.axis('off')
  else:
    object_count= len(r["class_ids"])
    colors = random_colors(object_count)
    for i in range(object_count):
      #1. Mask
      mask = r["masks"][:, :, i]
      contours = get_mask_contours(mask)
      for cnt in contours:
        cv2.polylines(img, [cnt], True, colors[i], 2)
        img = draw_mask(img, [cnt], colors[i])
    plt.figure(figsize=(12,12))
    plt.subplot(1,2,1)
    plt.imshow(np.squeeze(img1))
    plt.title('Image Originale')
    plt.axis('off')
    plt.subplot(1,2,2)
    plt.imshow(img)
    plt.title('Image de prediction')
    plt.axis('off')
    plt.show()